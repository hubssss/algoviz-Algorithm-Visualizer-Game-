import { Algorithm } from '@/types';

export const algorithms: Algorithm[] = [
  // Supervised Learning
  {
    id: 'linear-regression',
    name: 'Linear Regression',
    category: 'supervised-learning',
    difficulty: 'beginner',
    description: 'Find the best-fit line through data points to predict continuous values',
    icon: 'üìà',
    color: '#3B82F6',
    position: { x: 200, y: 150 },
    connections: ['logistic-regression', 'gradient-descent'],
    timeComplexity: 'O(n¬≤)',
    spaceComplexity: 'O(n)',
    useCase: 'House price prediction, sales forecasting',
  },
  {
    id: 'logistic-regression',
    name: 'Logistic Regression',
    category: 'supervised-learning',
    difficulty: 'beginner',
    description: 'Classification algorithm for binary outcomes using sigmoid function',
    icon: 'üìä',
    color: '#8B5CF6',
    position: { x: 350, y: 150 },
    connections: ['linear-regression', 'neural-networks'],
    timeComplexity: 'O(n¬≤)',
    spaceComplexity: 'O(n)',
    useCase: 'Email spam detection, disease diagnosis',
  },
  {
    id: 'decision-trees',
    name: 'Decision Trees',
    category: 'supervised-learning',
    difficulty: 'intermediate',
    description: 'Tree-based model that makes decisions by splitting data based on features',
    icon: 'üå≥',
    color: '#10B981',
    position: { x: 500, y: 200 },
    connections: ['random-forest', 'gradient-boosting'],
    timeComplexity: 'O(n log n)',
    spaceComplexity: 'O(n)',
    useCase: 'Credit scoring, customer segmentation',
  },
  {
    id: 'random-forest',
    name: 'Random Forest',
    category: 'supervised-learning',
    difficulty: 'intermediate',
    description: 'Ensemble of decision trees for improved accuracy and reduced overfitting',
    icon: 'üå≤',
    color: '#059669',
    position: { x: 650, y: 180 },
    connections: ['decision-trees', 'gradient-boosting'],
    timeComplexity: 'O(n log n √ó k)',
    spaceComplexity: 'O(n √ó k)',
    useCase: 'Feature importance, stock price prediction',
  },
  {
    id: 'neural-networks',
    name: 'Neural Networks',
    category: 'supervised-learning',
    difficulty: 'advanced',
    description: 'Multi-layer networks inspired by biological neurons for complex pattern recognition',
    icon: 'üß†',
    color: '#EC4899',
    position: { x: 400, y: 300 },
    connections: ['logistic-regression', 'gradient-descent'],
    timeComplexity: 'O(n √ó m √ó e)',
    spaceComplexity: 'O(n √ó m)',
    useCase: 'Image recognition, natural language processing',
  },

  // Unsupervised Learning
  {
    id: 'k-means',
    name: 'K-Means Clustering',
    category: 'unsupervised-learning',
    difficulty: 'beginner',
    description: 'Partition data into K clusters by minimizing within-cluster variance',
    icon: 'üéØ',
    color: '#F59E0B',
    position: { x: 200, y: 400 },
    connections: ['dbscan', 'hierarchical-clustering'],
    timeComplexity: 'O(n √ó k √ó i)',
    spaceComplexity: 'O(n √ó k)',
    useCase: 'Customer segmentation, image compression',
  },
  {
    id: 'pca',
    name: 'Principal Component Analysis',
    category: 'unsupervised-learning',
    difficulty: 'intermediate',
    description: 'Dimensionality reduction by finding principal components of variance',
    icon: 'üìê',
    color: '#EF4444',
    position: { x: 350, y: 450 },
    connections: ['k-means'],
    timeComplexity: 'O(n¬≥)',
    spaceComplexity: 'O(n¬≤)',
    useCase: 'Data visualization, noise reduction',
  },
  {
    id: 'dbscan',
    name: 'DBSCAN',
    category: 'unsupervised-learning',
    difficulty: 'intermediate',
    description: 'Density-based clustering that can find arbitrarily shaped clusters',
    icon: 'üîç',
    color: '#F97316',
    position: { x: 500, y: 400 },
    connections: ['k-means', 'hierarchical-clustering'],
    timeComplexity: 'O(n log n)',
    spaceComplexity: 'O(n)',
    useCase: 'Anomaly detection, spatial data analysis',
  },
  {
    id: 'hierarchical-clustering',
    name: 'Hierarchical Clustering',
    category: 'unsupervised-learning',
    difficulty: 'intermediate',
    description: 'Build a hierarchy of clusters using agglomerative or divisive methods',
    icon: 'üîó',
    color: '#DC2626',
    position: { x: 350, y: 550 },
    connections: ['k-means', 'dbscan'],
    timeComplexity: 'O(n¬≥)',
    spaceComplexity: 'O(n¬≤)',
    useCase: 'Taxonomy creation, document clustering',
  },

  // Optimization
  {
    id: 'gradient-descent',
    name: 'Gradient Descent',
    category: 'optimization',
    difficulty: 'intermediate',
    description: 'Iterative optimization algorithm to minimize functions by following gradients',
    icon: '‚¨áÔ∏è',
    color: '#6366F1',
    position: { x: 700, y: 300 },
    connections: ['linear-regression', 'neural-networks'],
    timeComplexity: 'O(n √ó i)',
    spaceComplexity: 'O(n)',
    useCase: 'Training machine learning models',
  },
  {
    id: 'genetic-algorithm',
    name: 'Genetic Algorithm',
    category: 'optimization',
    difficulty: 'advanced',
    description: 'Evolution-inspired algorithm using selection, crossover, and mutation',
    icon: 'üß¨',
    color: '#7C3AED',
    position: { x: 850, y: 250 },
    connections: ['simulated-annealing'],
    timeComplexity: 'O(n √ó g √ó p)',
    spaceComplexity: 'O(p)',
    useCase: 'Scheduling, feature selection',
  },
  {
    id: 'simulated-annealing',
    name: 'Simulated Annealing',
    category: 'optimization',
    difficulty: 'advanced',
    description: 'Probabilistic technique for approximating global optimum inspired by metallurgy',
    icon: 'üî•',
    color: '#C026D3',
    position: { x: 850, y: 400 },
    connections: ['genetic-algorithm'],
    timeComplexity: 'O(n √ó i)',
    spaceComplexity: 'O(n)',
    useCase: 'Traveling salesman, circuit design',
  },

  // Search & Graph
  {
    id: 'bfs',
    name: 'Breadth-First Search',
    category: 'search-graph',
    difficulty: 'beginner',
    description: 'Explore nodes level by level to find shortest path in unweighted graphs',
    icon: 'üîÑ',
    color: '#14B8A6',
    position: { x: 200, y: 700 },
    connections: ['dfs', 'dijkstra'],
    timeComplexity: 'O(V + E)',
    spaceComplexity: 'O(V)',
    useCase: 'Social network analysis, web crawling',
  },
  {
    id: 'dfs',
    name: 'Depth-First Search',
    category: 'search-graph',
    difficulty: 'beginner',
    description: 'Explore as far as possible along each branch before backtracking',
    icon: '‚¨áÔ∏è',
    color: '#0D9488',
    position: { x: 350, y: 700 },
    connections: ['bfs'],
    timeComplexity: 'O(V + E)',
    spaceComplexity: 'O(V)',
    useCase: 'Maze solving, topological sorting',
  },
  {
    id: 'dijkstra',
    name: "Dijkstra's Algorithm",
    category: 'search-graph',
    difficulty: 'intermediate',
    description: 'Find shortest paths from source to all vertices in weighted graphs',
    icon: 'üõ£Ô∏è',
    color: '#06B6D4',
    position: { x: 500, y: 650 },
    connections: ['bfs', 'a-star'],
    timeComplexity: 'O(V¬≤) or O(E log V)',
    spaceComplexity: 'O(V)',
    useCase: 'GPS navigation, network routing',
  },
  {
    id: 'a-star',
    name: 'A* Algorithm',
    category: 'search-graph',
    difficulty: 'intermediate',
    description: 'Informed search using heuristics to find optimal path efficiently',
    icon: '‚≠ê',
    color: '#0EA5E9',
    position: { x: 650, y: 650 },
    connections: ['dijkstra'],
    timeComplexity: 'O(E)',
    spaceComplexity: 'O(V)',
    useCase: 'Game AI pathfinding, robotics',
  },
  {
    id: 'pagerank',
    name: 'PageRank',
    category: 'search-graph',
    difficulty: 'advanced',
    description: "Google's algorithm to rank web pages based on link structure",
    icon: 'üîó',
    color: '#2563EB',
    position: { x: 500, y: 800 },
    connections: ['bfs'],
    timeComplexity: 'O(V + E)',
    spaceComplexity: 'O(V)',
    useCase: 'Search engines, influence analysis',
  },

  // Statistical Methods
  {
    id: 'bayes-theorem',
    name: 'Bayes Theorem',
    category: 'statistical',
    difficulty: 'intermediate',
    description: 'Update probability of hypothesis based on new evidence',
    icon: 'üé≤',
    color: '#8B5CF6',
    position: { x: 800, y: 500 },
    connections: [],
    timeComplexity: 'O(1)',
    spaceComplexity: 'O(1)',
    useCase: 'Medical diagnosis, spam filtering',
  },
  {
    id: 'hypothesis-testing',
    name: 'Hypothesis Testing',
    category: 'statistical',
    difficulty: 'intermediate',
    description: 'Statistical method to make inferences about population parameters',
    icon: 'üìä',
    color: '#A855F7',
    position: { x: 950, y: 550 },
    connections: ['bayes-theorem'],
    timeComplexity: 'O(n)',
    spaceComplexity: 'O(1)',
    useCase: 'A/B testing, clinical trials',
  },
];

export const algorithmCategories = [
  {
    id: 'supervised-learning',
    name: 'Supervised Learning',
    description: 'Learn from labeled data to make predictions',
    icon: 'üéì',
    color: '#3B82F6',
  },
  {
    id: 'unsupervised-learning',
    name: 'Unsupervised Learning',
    description: 'Discover patterns in unlabeled data',
    icon: 'üîç',
    color: '#F59E0B',
  },
  {
    id: 'optimization',
    name: 'Optimization',
    description: 'Find optimal solutions to complex problems',
    icon: '‚ö°',
    color: '#8B5CF6',
  },
  {
    id: 'search-graph',
    name: 'Search & Graph',
    description: 'Navigate and analyze graph structures',
    icon: 'üó∫Ô∏è',
    color: '#14B8A6',
  },
  {
    id: 'statistical',
    name: 'Statistical Methods',
    description: 'Mathematical foundations for data analysis',
    icon: 'üìà',
    color: '#A855F7',
  },
];